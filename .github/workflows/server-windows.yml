name: Run server on Windows
on: workflow_dispatch

jobs:
  server-linux-x86:
    runs-on: ubuntu-latest
    container:
      image: wolframresearch/wolframengine:14.2
      options: --user root
    env:
      WOLFRAM_SYSTEM_ID: Linux-x86-64-v8
      WOLFRAMINIT: "-pwfile !cloudlm.wolfram.com -entitlement ${{ secrets.WOLFRAM_LICENSE_ENTITLEMENT_ID }}"
    timeout-minutes: 20
    steps:
      - name: Install tools in container
        run: |
          set -euxo pipefail
          apt-get update -y
          apt-get install -y curl ca-certificates libuv1-dev

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Download cloudflared (for public tunnel)
        env:
          CF_BIN: '${{ runner.temp }}/cloudflared'
        run: |
          set -euxo pipefail
          curl -L "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64" -o "${CF_BIN}"
          chmod +x "${CF_BIN}"
          echo "cloudflared at ${CF_BIN}"

      - name: Run server, expose ports, and stream logs
        env:
          CF_BIN: '${{ runner.temp }}/cloudflared'
        run: |
          set -euxo pipefail

          # Show versions if present (container already has Wolfram)
          wolframscript -version || true
          wolfram -version || true

          LOG_DIR="${RUNNER_TEMP}"
          LOG1_OUT="${LOG_DIR}/cloudflared-20560.out.log"
          LOG1_ERR="${LOG_DIR}/cloudflared-20560.err.log"

          # Start tunnel in background; keep stdout/stderr separate
          nohup "${CF_BIN}" tunnel --url http://127.0.0.1:20560 \
            >"${LOG1_OUT}" 2>"${LOG1_ERR}" &
          CF_PID=$!

          echo "==== Waiting for tunnel URLs... ===="
          sleep 4
          (tail -n +1 -F "${LOG1_OUT}" & echo $! > "${LOG_DIR}/tail1.pid") &
          (tail -n +1 -F "${LOG1_ERR}" & echo $! > "${LOG_DIR}/tail2.pid") &

          echo "==== Starting Wolfram server (console output below) ===="
          # Use your script like on Windows:
          wolframscript -file ./Scripts/start.wls || EXIT_CODE=$? || true
          EXIT_CODE=${EXIT_CODE:-0}
          echo "==== Wolfram server exited with code ${EXIT_CODE} ===="

          # Cleanup tunnels and tailers
          kill "${CF_PID}" || true
          if [ -f "${LOG_DIR}/tail1.pid" ]; then kill "$(cat "${LOG_DIR}/tail1.pid")" || true; fi
          if [ -f "${LOG_DIR}/tail2.pid" ]; then kill "$(cat "${LOG_DIR}/tail2.pid")" || true; fi

          if [ "${EXIT_CODE}" -ne 0 ]; then
            echo "Wolfram server process exited with non-zero code: ${EXIT_CODE}" >&2
            exit "${EXIT_CODE}"
          fi