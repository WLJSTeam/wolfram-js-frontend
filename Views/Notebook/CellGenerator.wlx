CellsGroup      = ImportComponent["Skeleton/CellGroup.wlx"];
CellFrame       = ImportComponent["Skeleton/CellFrame.wlx"];
Children        = ImportComponent["Skeleton/Children.wlx"];
CellsSubgroup   = ImportComponent["Skeleton/CellSubgroup.wlx"];

Border          = ImportComponent["Skeleton/Border.wlx"];

CellWrapper     = ImportComponent["Skeleton/CellWrapper.wlx"];
{Hr, HrScript}  = ImportComponent["Skeleton/Hr.wlx"];

{ControlsLeft, ControlsRight, ControlsScript}            = ImportComponent["Skeleton/Controls.wlx"];

{EvaluationBar, EvaluationBarScript}  = ImportComponent["Skeleton/EvaluationBar.wlx"];

Component[cell_cell`CellObj, cli_, parameters_, OptionsPattern[]] := With[{
    ExtensionTemplateInjection = OptionValue["ExtensionTemplateInjection"], 
    ExtensionTemplateWrapper = OptionValue["ExtensionTemplateWrapper"],
    Class = StringJoin["hover:b0g-", (If[StringQ[#], #, "teal"]&) @ (parameters["AccentColor"]), "-700/5", " ", If[TrueQ[cell["Invisible"]], "invisible-cell", ""]],
    Style = "border-radius:2px"
},
    If[cell`InputCellQ @ cell,
        EventHandler[cell, {
            "Focus" -> Function[Null, Print["Focus!"]; With[{n = cell["Notebook"]}, n["FocusedCell"] = cell] ]
        }];
        

        <CellsGroup Cell={cell} Class={Class} Style={Style}>
            <ExtensionTemplateInjection Template={"CellGroup-Prolog"} Cell={cell} Client={cli}/>
            <CellsSubgroup Cell={cell}>
                <ControlsLeft Cell={cell}/>
                <CellFrame Cell={cell}>
                    <ExtensionTemplateInjection Template={"CellFrame-Prolog"} Cell={cell} Client={cli}/>
                    <ExtensionTemplateWrapper Template={"CellWrapper"} Cell={cell} Client={cli}>
                        <CellWrapper Parameters={parameters} Cell={cell}/>
                    </ExtensionTemplateWrapper>
                    <EvaluationBar Cell={cell} Client={cli}/>
                    <Hr Cell={cell}/> 
                    <ExtensionTemplateWrapper Template={"Children"} Cell={cell} Client={cli}>
                        <Children Cell={cell}/>
                    </ExtensionTemplateWrapper>
                    <ExtensionTemplateInjection Template={"CellFrame-Epilog"} Cell={cell} Client={cli}/>
                </CellFrame>
                <ControlsRight Cell={cell}/>
                <Border/>
            </CellsSubgroup>
            <ExtensionTemplateInjection Template={"CellGroup-Epilog"} Cell={cell} Client={cli}/>
        </CellsGroup>
    ,
        <CellsGroup Cell={cell}>
            <ExtensionTemplateInjection Template={"CellGroup-Prolog"} Cell={cell} Client={cli}/>
            <CellFrame Cell={cell}>
                <ExtensionTemplateInjection Template={"CellFrame-Prolog"} Cell={cell} Client={cli}/>
                <ExtensionTemplateWrapper Template={"CellWrapper"} Cell={cell} Client={cli}>
                    <CellWrapper Cell={cell}/>
                </ExtensionTemplateWrapper>
                <ExtensionTemplateInjection Template={"CellFrame-Epilog"} Cell={cell} Client={cli}/>
            </CellFrame>   
            <Hr Cell={cell}/> 
            <ExtensionTemplateInjection Template={"CellGroup-Epilog"} Cell={cell} Client={cli}/>
        </CellsGroup>  
    ]
]

emptyStringFunction[x__] := ""
sequenceIdentity[first__, rulels___Rule] := first 

Options[Component] = {"ExtensionTemplateWrapper"-> sequenceIdentity, "ExtensionTemplateInjection" -> emptyStringFunction}

Script = With[{},
    ""
]

{Component, Script}
