
Component[OptionsPattern[]] := With[{
  Plugins = Join[<|"view"->{}, "misc"->{}, "edit"->{}, "kernel"->{}, "file"->{}|>, OptionValue["Plugins"]],
  Controls = OptionValue["Controls"],
  Class = OptionValue["Class"],
  Style = OptionValue["Style"]
},
  With[{LayoutFile = ExportString[{
    {
    <|"label"->"New notebook", "name"->"newshort", "a"->"Ctrl+N"|>,
    <|"label"->"Open File", "name"->"openFile", "a"->"Ctrl+O"|>,
    <|"type"->"separator"|>,
    <|"label"->"New note in folder", "name"->"new", "a"->"Ctrl+Shift+N"|>,
    <|"label"->"Prompt", "name"->"prompt", "a"->"Shift+Alt+Space"|>,
    <|"label"->"Open Folder", "name"->"openFolder"|>,
    <|"type"->"separator"|>,
    <|"label"->"Zoom in", "name"->"zoomIn"|>,
    <|"label"->"Zoom out", "name"->"zoomOut"|>,
    <|"type"->"separator"|>
   }
 ,
    Table[ With[{event = Vi["event"], Label = Vi["label"]},
       If[StringQ[Vi["accelerator"][[2]]], 
        <|"name"->event, "label"->Label, "ctl"->True, "a"->Vi["accelerator"][[2]]|> 
       , 
        <|"name"->event, "label"->Label, "ctl"->True|> 
       ]       
    ], {Vi, Plugins["file"]}]
  ,
    <|"type"->"separator"|>
  ,
    {
    <|"label"->"Save", "name"->"Save", "a"->"Ctrl+S"|>,
    <|"label"->"Save As", "name"->"SaveAs"|>,
    <|"type"->"separator"|>,
    <|"label"->"Locate Examples", "name"->"locateExamples"|>,
    <|"type"->"separator"|>,
    <|"label"->"Settings", "name"->"OpenSettings", "ctl"->True|>,
    <|"label"->"Acknowledgments", "name"->"acknowledgments"|>,
    <|"type"->"separator"|>,
    <|"label"->"Open as quick note", "name"->"quickmode"|>,
    <|"label"->"Open in browser", "name"->"browser"|>,    
    <|"label"->"Print", "name"->"print"|>,   
    <|"label"->"Exit", "name"->"exit"|>
    }
  } // Flatten, "JSON"]
,
LayoutView = ExportString[{
   {
    <|"label"->"Reload page", "name"->"reload"|>,
    <|"label"->"Always on top", "name"->"OnTop"|>,
    <|"type"->"separator"|>,
    <|"label"->"Show/Hide cell", "name"->"togglecells", "a"->"Alt+2"|>,
    <|"label"->"Clear outputs", "name"->"clearoutputs", "a"->"Alt+u"|>,
    <|"type"->"separator"|>,
    <|"label"->"Zoom in", "name"->"zoomIn"|>,
    <|"label"->"Zoom out", "name"->"zoomOut"|>
   }
  
  } // Flatten, "JSON"]
,
LayoutEvaluation = ExportString[{
  {
    <|"label"->"Abort", "name"->"abort", "a"->"Alt+."|>,
    <|"label"->"Evaluate initialization cells", "name"->"evalInit", "a"->"Alt+i"|>,
    <|"type"->"separator"|>,
    <|"label"->"New Kernel", "name"->"evalInit"|>,
    <|"label"->"Restart Kernel", "name"->"restartkernels"|>,
    <|"label"->"Shutdown all ", "name"->"shutdownall"|>,
    <|"type"->"separator"|>
  },
  Table[ With[{event = Vi["event"], Label = Vi["label"]},
       If[StringQ[Vi["accelerator"][[2]]], 
        <|"name"->event, "label"->Label, "ctl"->True, "a"->Vi["accelerator"][[2]]|> 
       , 
        <|"name"->event, "label"->Label, "ctl"->True|> 
       ]        
  ], {Vi, Join[Plugins["kernel"], {}]}]  
} // Flatten, "JSON"]
,
LayoutMisc = 
  ExportString[{
      Table[ With[{event = Vi["event"], Label = Vi["label"]},
       If[StringQ[Vi["accelerator"][[2]]], 
        <|"name"->event, "label"->Label, "ctl"->True, "a"->Vi["accelerator"][[2]]|> 
       , 
        <|"name"->event, "label"->Label, "ctl"->True|> 
       ]       
      ], {Vi, Join[Plugins["misc"], {}]}]
  } // Flatten, "JSON"]
},

    <div class="h-titlebar flex {Class}" style="-webkit-app-region:none">
        <div class="mr-auto pr-4 flex gap-x-1 text-sm" style="{Style}">
            <button style="-webkit-app-region: no-drag" id="fake-menu-file" class="text-gray-500 hover:text-black dark:hover:text-white rounded-md px-2 h-6 win:ml-0 owin:ml-0 linux:ml-0">
                File
            </button>

            <button style="-webkit-app-region: no-drag" id="fake-menu-view" class="text-gray-500 hover:text-black dark:hover:text-white rounded-md px-2 h-6 win:ml-0 owin:ml-0 linux:ml-0">
                View
            </button>

            <button style="-webkit-app-region: no-drag" id="fake-menu-evaluation" class="text-gray-500 hover:text-black dark:hover:text-white rounded-md px-2 h-6 win:ml-0 owin:ml-0 linux:ml-0">
                Evaluation
            </button>            

            <button style="-webkit-app-region: no-drag" id="fake-menu-misc" class="text-gray-500 hover:text-black dark:hover:text-white rounded-md px-2 h-6 win:ml-0 owin:ml-0 linux:ml-0">
                Misc
            </button>

        </div>
        <div class="grow h-full" style="-webkit-app-region: drag;"></div>                
        <script type="module">
          const exts = [['file', <LayoutFile/>], ['view', <LayoutView/>], ['evaluation', <LayoutEvaluation/>], ['misc', <LayoutMisc/>]];
          for (const ext of exts) {
               const hamburger = document.getElementById('fake-menu-'+ext[0]);
               hamburger.addEventListener('click', async () => {
                 const res = await window.electronAPI.createMenu(ext[1].map((el, i) => {
                  if (el.type == 'separator') return {type: 'separator'};
                  if (el.a) return {label: el.label, ref: String(i), accelerator: el.a, registerAccelerator:false}
                  return {label: el.label, ref: String(i)}
                 }));
                 if (res) {
                  const el = ext[1][parseInt(res)];
                  if (el.ctl) {
                    server.io.fire('<Controls/>', 'True', el.name)
                  } else {
                    window.electronAPI.topMenu(el.name);
                  }
                 }  
               });      
          }
      </script>              
    </div>

  ]]


Options[Component] = {"Plugins"-><||>, "Controls"->"", "Style" -> "", "Class" -> "p-1 pr-2"}

Component

