Component[OptionsPattern[]] := With[{
    Port = OptionValue["Port"],
    Controller1 = CreateUUID[],
    electronQ = OptionValue["ElectronQ"],
    destructor = OptionValue["Destructor"],
    cli = OptionValue["Client"]
}, Module[{},
    EventHandler[Port, {
        "ErrorBox" -> Function[data,
            EventFire[Controller1, "Request", <|
                "Client"->If[SymbolQ[cli], Global`$Client, cli], "Options"->KeyDrop[data, {"Promise"}]
            |>];
        ]
    }];


    If[electronQ,
        <WebUIJSBind Event={Controller1}>
            this.on('Request', async (payload) => {
                const api = window.electronAPI || window.iframeAPI;
                const args = await interpretate(data, {hold:true});
                const opts = await interpretate(args.Options, {});
                api.showErrorBox(opts, ()=>{})
            })
        </WebUIJSBind>
    ,
        <WebUIJSBind Event={Controller1}>
            this.on('Request', async (payload, env) => {
                const args = await interpretate(data, {hold:true});
                const opts = await interpretate(args.Options, {});
                if (opts.content) alert(opts.title + ': ' + opts.content); else alert(opts.title);
            })
        </WebUIJSBind>
    ]
]];

Options[Component] = {"Port" -> "", "Client" -> "", "ElectronQ" -> "", "Destructor"->Null}

Component