http                      =  $Options["HTTPHandler"];
env                       =  $Options["Env"];
AppEvent                  =  $Options["AppEvent"];
AppProtocol                =  $Options["AppProtocol"];
ExtensionTemplates        =  $Options["ExtensionTemplates"];
ExtensionSidebarIcons        =  $Options["ExtensionSidebarIcons"];
middleware                = $Options["Middleware"];


Head        = ImportComponent["Components/Head.wlx"];

Kernels   =  ImportComponent["Components/Kernel/Minimal.wlx"];

Notifications  = ImportComponent["Components/Notifications/Notifications.wlx"];

Alert           = ImportComponent["Components/Alert.wlx"];

Modals           = ImportComponent["Components/Modals/Modals.wlx"];

Views            = ImportComponent["Views.wl"];

TopBar           = ImportComponent["Components/Topbar.wlx"];

ElectronBinds           = ImportComponent["Components/ElectronAppBinds.wlx"];

BrowserMenu            = ImportComponent["Components/FakeMenuBrowser.wlx"];

FakeMenu            = ImportComponent["Components/FakeMenu.wlx"];

{saveNotebook, loadNotebook, renameNotebook, cloneNotebook}         = ImportComponent["Loader.wl"];
{deinitKernel, initKernel}           = ImportComponent["KernelUtils.wl"];

{loadSettings, storeSettings}        = ImportComponent["Settings.wl"];

autolaunch                           = ImportComponent["Autolaunch.wl"];

serverParams = <|"env" -> env|>;
settings = <||>;


loadSettings[settings];
loadSettingsOnceMore := With[{},
  Print["Load settings one more time"];
  loadSettingsOnceMore = Null;
  loadSettings[settings];
];




ExtensionsJS = (StringJoin["/", FileNameToURLPath[#]]) &/@ WLJSPackages`Includes["js"];
ExtensionsStyles = With[{Path = StringJoin["/", FileNameToURLPath[#]]},
  <link rel="stylesheet" href="{Path}"/> 
] &/@ WLJSPackages`Includes["styles"] // ToStringRiffle;

defaultHomeFolder = If[KeyExistsQ[$Env, "folder"], $Env["folder"], Join[<|"Home"->AppExtensions`DefaultDocumentsDir (*`*)|>, settings]["Home"] ];

ExtensionMenuItems = <|"file"->{}, "misc"->{}, "kernel"->{}, "view"->{}, "edit"->{}|>;

Map[Function[item, 
  If[KeyExistsQ[item, "section"], 
    With[{sec = item["section"]},
      ExtensionMenuItems[sec] = Append[ExtensionMenuItems[sec], item]
    ]
  ,
    ExtensionMenuItems["misc"] = Append[ExtensionMenuItems["misc"], item]
  ];
], Select[Flatten[WLJSPackages`Packages[#, "wljs-meta", "menu"] &/@ Keys[WLJSPackages`Packages]], AssociationQ]];

App[request_] := With[{
  Secret = CreateUUID[], 
  GlobalControls  = CreateUUID[],
  Path = defaultHomeFolder,
  cachedClient = Unique["cachedClient"],
  Protocol = If[StringTake[#, -1] === "/", StringDrop[#, -1], # ] &@ (If[StringTake[#, 1] === "/", StringDrop[#, 1], #] &@ URLDecode @ StringDrop[request["Path"], 
    Switch[$OperatingSystem,
      "Windows", 
      StringLength["/protocol/"], 
      "Linux",
      StringLength["protocol"],
      _,  
      StringLength["protocol/"] 
    ]
  ]) 
 },

  Print["## Loading by protocol : "]; Print[Protocol];

  
  With[{
        
        SidebarId = CreateUUID[],
        OnLoad    = CreateUUID[],
        ModalController = CreateUUID[],
        accentColor = With[{c = Lookup[settings, "AccentColor", "System"]}, If[c === "System", Lookup[System`$Env, "AccentColor", "#008855"], c]],
        kernels = Hold[AppExtensions`KernelList] (*`*),
        GlobalMessanger = CreateUUID[],
        GlobalParameters = Join[<|"Navigator"->(If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"]), "ElectronQ" -> ElectronQ[request], "AccentColor"->"teal", "BackupTimeout" -> (3 60 1000)|>, settings],
        AppClass = If[ElectronQ[request], "", "dark:bg-gray-800"],
        NavigatorOS = If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"],
        
        Transparency = If[KeyExistsQ[settings, "Transparency"], If[settings["Transparency"], "true", "false"], "false"]   
    },

    (* /* collect any runtime changes  */ *)
    loadSettingsOnceMore;

    EventHandler[OnLoad, Function[Null,
      cachedClient = $Client;

      With[{socket = EventClone[$Client]},
        EventHandler[socket, {"Closed" -> Function[Null,
          EventRemove[socket];  
          Echo["Protocol >> Destroy"];
          EventRemove[Secret];
          EventRemove[GlobalControls];
          EventRemove[ModalController];
          EventRemove[GlobalMessanger];
          ClearAll[cachedClient];
          EventFire[AppEvent, "AppUIDestroy", True];
        ]}]
      ];

      With[{msg = ImportString[Protocol, "RawJSON"]},
        Echo[msg];
        EventFire[AppProtocol, msg["type"], Join[<|"URL" -> Protocol, "Client" -> $Client, "Controls" -> GlobalControls, "Messanger" -> GlobalMessanger, "Modals"->ModalController, "KernelList"->kernels|>, msg]];
      ];
      

      EventRemove[OnLoad];
    ]];

    (* /* redirect to extensions  */ *)
    EventHandler[EventClone[GlobalMessanger], {
      any_ :> (EventFire[AppEvent, Messanger[any], #]&)
    }];

    (* /* redirect to extensions  
    EventHandler[EventClone[GlobalControls], {
      any_ :> (EventFire[AppEvent, any, #]&)
    }]; */ *)
   
  {
    "<!DOCTYPE html>"
  ,

    <html class="h-full {AppClass}" os="{NavigatorOS}" transparency="{Transparency}" > 
        <Head AccentColor={accentColor} Title={FileNameTake[Path]} Settings={settings}>
            <meta charset="utf-8"/>
            <WLJSHeader List={ExtensionsJS}/>  
            <WLJSTransportScript TwoKernels={True} PrefixMode={$Env["wsprefix"]} Port={$Env["ws"]}/>     
            <WebUIInitializationScript/>
            <ExtensionsStyles/>
        </Head>  
        <ExtensionTemplates Template={"AppHead"} />
        <body class="h-full dark:linux:bg-gray-700 dark:owin:bg-gray-700 owin:bg-white owin:border owin:border-slate-400"> 
        <WebUIOnLoad Event={OnLoad}/>
        <div class="h-full">
          <Modals CachedClient={cachedClient} ModalsPort={ModalController}/>
          <ExtensionTemplates Template={"AppOverlay"} Path={Path} AppEvents={AppEvent} MessagePort={GlobalMessanger}/>
          <Kernels AppEvents={AppEvent} Controls={GlobalControls} Messager={GlobalMessanger} KernelList={kernels} OnConnected={initKernel[serverParams]} OnExit={deinitKernel}/>

          <div class="h-full" id="frame">
            <div class="h-full flex flex-col">
              <TopBar Menu={FakeMenu} ExtensionTemplates={ExtensionTemplates} AppEvents={AppEvent} Messanger={GlobalMessanger} Parameters={GlobalParameters} Controls={GlobalControls} Path={Path} Modals={ModalController}/>
              <Notifications CachedClient={cachedClient} MessagePort={GlobalMessanger}/>
              <ExtensionTemplates Template={"AppFooter"} Path={Path} AppEvents={AppEvent} MessagePort={GlobalMessanger}/>
            </div> 
          </div>
        </div>
        <Script Secret={Secret}/>
        <ExtensionTemplates Template={"AppScripts"} />
        <ElectronBinds Controls={GlobalControls}/>
      </body>
    </html>
  } // StringRiffle
] ];

Script[Rule["Secret", Secret_]] := With[{},
  ""
];


CMDAPIHandler[request_] := With[{
  Secret = CreateUUID[], 
  GlobalControls  = CreateUUID[],
  Path = defaultHomeFolder,
  Protocol = If[StringTake[#, -1] === "/", StringDrop[#, -1], # ] &@ (If[StringTake[#, 1] === "/", StringDrop[#, 1], #] &@ URLDecode @ StringDrop[request["Path"], 
    Switch[$OperatingSystem,
      "Windows", 
      StringLength["/cmdapi/"], 
      "Linux",
      StringLength["cmdapi"],
      _,  
      StringLength["cmdapi/"] 
    ]
  ]) 
 },

Echo["Protocol"];
Echo[Protocol];
      With[{msg = ImportString[FromCharacterCode@ToCharacterCode[Protocol, "UTF-8"], "RawJSON"]},
        Echo[msg];
        With[{reply = EventFire[AppProtocol, StringJoin["cmd_", msg["c"]], Join[<|"URL" -> Protocol, "KernelList"->kernels|>, msg]]},
          reply
        ]
      ]
]


http["MessageHandler", "Protocol"] = AssocMatchQ[<|"Path" -> "/protocol/" ~~ ___|>] -> middleware[App];
http["MessageHandler", "CMD API"] = AssocMatchQ[<|"Path" -> "/cmdapi/" ~~ ___|>] -> middleware[CMDAPIHandler];



Print["Protocol Loaded!"];

